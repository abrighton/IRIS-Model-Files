subsystem = IRIS
component = oiwfs_detector_assembly

publish {
  events     = [
    {
      name              = state
      description       = "OIWFS detector assembly overall state" 
      maxRate = 20
      archive = true
      attributes = [
        {
          name          = cmd
          description   = "command state"
          enum          = [UNINITIALIZED,READY,BUSY,CONTINUOUS]
        }
        {
          name          = detector
          description   = "When SINGLE, executing a single exposure. When CONTINUOUS, using external triggers and stepping through guide and acquisition table. One state for each of the three detectors."
          type          = array
          dimensions: [3]
          items = {
            enum        = [SINGLE,CONTINUOUS,STOP]
          }
        }
      ]
    }
    {
      name              = pixelCompression
      description       = """OIWFS detector pixel compression coefficients
      
      The OIWFS publishes a multiplicative (gain) factor (to be applied first), and a scalar offset (to be applied second) to convert from compressed 2-byte integer to floating point pixel values for each OIWFS.

      <em>
      Discussion: These scale factors will be beneficial to reduce data size when reading out a large region of interest window quickly, especially with an OIWFS detector employing e.g. a Leonardo APD array.

      Discussion: This telemetry it is not needed if IRIS transmits floating point pixel values to the NRTC.
      </em>
      """
      attributes = [
        {
          name          = gain
          description   = "integer to float scale factor"
          type          = float
        }
        {
          name          = offset
          description   = "integer to float offset"
          type          = float
        }
      ]
    }
    {
      name              = pixelDestination
      description       = """The NRTC server role and IP address that is receiving OIWFS detector pixels

      """
      attributes = [
        {
          name          = role
          description   = "Server role"
          enum          = [ WCC, TEST, NONE ]
        }
        {
          name          = ipAddr
          description   = "IP address"
          type          = string
        }
      ]
    }
  ]
}