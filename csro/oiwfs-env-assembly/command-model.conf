subsystem = IRIS
component = oiwfs_env_assembly

description = "OIWFS Environmental Assembly Commands."

receive = [
    {
        name            = debug
        description     = """Change the assembly debug message level. (engineering)

    The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
    <ul>
    <li>    \b DEBUG: extra details as messages are processed
    <li>    \b INFO : connections and command status
    <li>    \b WARN(ing) : unexpected events/messages/etc
    <li>    \b ERROR: failed to do something
    </ul>

    *Friendly Command.*

    Precondition:
    <ul>
    <li> state.cmd != UNINITIALIZED
    </ul>
    Execution:
    <ul>
    <li> none
    </ul>
    At Completion:
    <ul>
    <li> state.debug = {input debug}
    </ul>"""
        args = [
            {
                name        = debug
                description = target debug level
                enum        = [ DEBUG, INFO, WARN, ERROR ]
            }
        ]
        requiredArgs = [ debug ]
    }
    {
        name            = init
        description     = """Prepares the assembly for operation and reads configuration files. (engineering)

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
        args = [
            {
                name        = configName
                description = Name of the configuration file to get from the TMT Configuration Service
                type        = string
            }
            {
                name        = configVersion
                description = Version of the configuration file to get from the TMT Configuration Service
                type        = string
            }
        ]
    }
    {
        name = config
        description     = """Reads configuration files. (engineering)

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

This command does not otherwise alter the state of the assembly (i.e., unlike init, this command will not reset internal state variables).

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
        args = [
            {
                name        = configName
                description = "Name of the configuration file to get from the TMT Configuration Service"
                type        = string
            }
            {
                name        = configVersion
                description = "Version of the configuration file to get from the TMT Configuration Service"
                type        = string
            }
        ]
    }
    {
        name = test
        description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCDs.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    }

    {
        name                  = heatSnout
        description     = """Instruct the OIWFS Enclosure to run the snout and gate valve heaters

When connecting the OIWFS to NFIRAOS, or when otherwise exposed to dome air, this command is used to activate the snout and gate valve heaters to prevent condensation.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""

        args = [
            {
                name        = heaterState
                description = "Activate the heaters if ON, otherwise turn OFF."
                enum = [ON, OFF]
            }
        ]
    }

    {
        name            = follow
        description     = """Enable OIWFS Enclosure following of the NFIRAOS Enclosure.

When the follow mode is enabled, the OIWFS Enclosure Assembly will monitor the state of the NFIRAOS Enclosure to determine whether it is safe to perform its automated panel defrost cycle.

If the OIWFS is not connected to NFIRAOS, this command will fail.

When defrosting, the envState attribute of iris.oiwfs.env.state will transition to CDPD.

This command can also be used to stop following. Note that if following is disengaged while performing a defrost cycle, the defrost will be aborted.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.connectedNfiraos = TRUE
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
</ul>"""
        args = [
            {
                name        = follow
                description = "Follow the state of the NFIRAOS enclosure if TRUE, stop following if FALSE."
                type = boolean
            }
        ]
    }

    {
        name                  = cooldown
        description     = """Instruct the OIWFS Enclosure to start cooling and operate in its cold temperature mode.

In order for this command to be successful the snout gate valve must already have been closed, and a dry air supply must already have been used to lower the frost/dew point below the current ambient temperature (and should continue throughout the cooldown).

When successful, this command activates cooling loops to the panel, optical bench, and electronics. It also activates the outer skin heater to prevent condensation.

If during the cooldown the temperature approaches the dew or frost point, the cooldown is aborted and the temperature is held at the current value. If this occurs state.envState will transition to HOLD. Also, the oiwfsTemperature alarm will be raised. If the humidity subsequently drops, a new cooldown command can be sent.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.envState = WARM | WARMING | HOLD
<li> state.gateOpen = FALSE
<li> plcEnvSensors.airTemp > plcEnvSensors.relHumidityPoint
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.envState = COOLING | COLD
</ul>"""  
}

    {
        name                  = warmup
        description     = """Instruct the OIWFS Enclosure to start warming and operate in its warm (ambient) temperature mode. (engineering)

In order for this command to be successful the snout gate valve must already have been closed, and a dry air supply must be connected.

While warming, the cooling loops are closed, and the optical bench heater is active.

*Simple Command.*

Precondiction:
<ul>
<li> state.cmd != UNINITALIZED
<li> state.envState = COLD | COOLING | HOLD
<li> state.gateOpen = FALSE
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.envState = WARMING | WARM
</ul>"""
    }

    {
        name             = setGateState
        description      = """Instructs the OIWFS enclosure to open or close the gate valve.

This will tell the enclosure to change the state of the gate valve at the bottom of the snout.  The valve can either be set to be opened or closed and the result is dependent on the current conditions inside and outside of the enclosure.  If conditions will pose a hazard to the enclosure conditions (such as the enclosure is running cold and the OIWFS is not connected to NFIRAOS, then the command will be rejected.  This command will also be rejected if the environmental conditions pose a hazard (such as the temperature differentials greater than 0.5 degrees Celsius may cause frost/condensation).  When evaluating the environmental conditions, the OIWFS envlosure will consider not only the current conditions of the enclosure and gate valve, but also the current conditions of the snout, NFIRAOS (when connected) and ambient environment (when not connected to NFIRAOS).

It is in general possible to close the snout gate valve at any time.

In addition, when connected to NFIRAOS, if the assembly detects significant temperature difference between the OIWFS and NFIRAOS, and the snout gate valve is open, it will automatically close.

*Discrete Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> portGate.{input portGateId} = {input portGateState}
</ul>"""
        args = [
            {
                name        = gateValveState
                description = The desired state of the gate valve.
                enum        = [OPEN, CLOSE]
            }
        ]
    }

    {
        name            = shutdown
        description     = """Shutdown the assembly. (engineering)

This command is used to properly shut down the assembly in preparation for turning off the OIWFS Components Controller server. This command does not affect the PLC HCD, which must be shut down separately.

*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
    }





]
