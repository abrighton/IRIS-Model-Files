subsystem = IRIS
component = sci-adc-assembly

description = """
IRIS Science Path ADC Assembly Commands.

Commands will be rejected immediately when the assembly is not in an appropriate state.

__TBD__: We may need a command that does priming for a new target and start following at the designated time. This command would need to receive information about the new target and the time to start following motion as arguments. It would be achieved by sequentially executing ROTATE and FOLLOW commands.

__ASSUMPTION__: This command model more or less tried to list up commands required to perform testing, engineering work and observation. Thus, most of the commands seem to be very low level. In the future, high level commands for observation might be defined to more or less autonomously perform observation instead of issuing low level commands one by one. Such high level commands would be achieved by a sequence of low level commands, so the current main purpose of this command model is to extract information about what kind of instructions would be made by a person (it may be an engineer, an instrument specialist or an observer) for all use cases, not just for observation.

__ASSUMPTION__: All the commands do NOT block the caller, but they are executed asynchronously. The response to each command will be sent back to the caller after some time. This time would be ranging from very short time (millisecond order or even less) to very long time (several seconds or a bit more). In principle, the response will be sent back when the specified action is completed, but the response may be sent back immediately if the command is invalid (e.g. sending FOLLOW command before datuming is completed) or invalid argument is given. Exception is made for FOLLOW command. See the description of FOLLOW command for more details. Note that this command behavior depends on future CSW implementation.

__ASSUMPTION__: There is no command queues in an Assembly component as described in [TMT Software Detailed Design (CSW) (TMT.SFT.TEC.15.002.REL01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-49912/TMTSoftwareDesign-CSWPD_REL01.pdf). Only one command can be processed at a time, and commands will not be pooled in a queue for later processing. If a command (except 'stop' command) is sent to this assembly while it is processing a previous command, this assembly will immediately return an error response which indicates another action is on-going. Note that this command queue issue depens on future CSW implementation.
"""

receive = [
    {
        name = INITIALIZE
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
	description = """
This command loads the configuration of this assembly from Configuration Service or a local file (TBD). It is accepted only when this assembly is in Init:Loaded state. After successful completion of this command execution, this assembly will be staged in Init:Initialized state. If it fails, this assembly will stay in Init:Loaded state.

This command never rotates any axis, nor does it trigger the communication with underlying HCDs.

This command corresponds to 'initialize' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).

__TBD__: identify what configuration to be loaded
"""
    }
    {
        name = UNINITIALIZE
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
        description = """
This command stages this assembly in Init:Loaded state from Init:Initialized so that the initialization can be performed again after the configuration is changed. It does nothing other than that. If it fails, this assembly will stay in Init:Initialized state.

This command never rotates any axis, nor does it trigger the communication with underlying HCDs.

This command corresponds to 'uninitialize' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).
"""
    }
    {
        name = STARTUP
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
        description = """
This command establishes connection to galil-hcd and power-assembly (or eaton-hcd), and turns on the motion controller if it is off. It is accepted only when this assembly is in Init:Initialized state. After successful completion of this command execution, this assembly will be staged in Init:Running state. If it fails, this assembly will stay in Init:Initialized state.

This command never rotates any axis, but it excites all the motors to hold the current positions of all axes. If any motion is on-going, it is interrupted and stopped. It may affect the thermal condition inside the dewar.

This command corresponds to 'startup' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf)
"""
    }
    {
        name = SHUTDOWN
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
        description = """
This command cancels the on-going movement and stage this assembly in Init:Initialized after the command execution succeeds. It is accepted in whatever states except Init:* states (but including Init:Running state). It does NOT turn off the motion controller.

The failure of this command execution will stage this assembly in a certain state depending the context. For example, if this command is executed during retructing and this assembly fails to stop the retruction axis for some reason, it is staged in Out:Error state. It never turns off the motion controller.

Internally, this command will execute STOP and SOFT_SHUTDOWN commands sequentially.

This command corresponds to 'shutdown' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).
"""
    }
    {
        name = SOFT_RESET
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
        description = """
This command resets this assembly without cycling the power of the motion controller. During the command execution, the configuration will be reloaded and the connections to HCDs are reestablished. Successful execution will result in Init:Running state.

This command can be invoked only when all the axes are stopped. If someone wants to reset this assembly during a motion, 'stop' command has to be executed explicitly beforehand.

Internally, this command will execute SOFT_SHUTDOWN, UNINITIALIZE, INITIALIZE and STARTUP commands sequentially.

"""
    }
    {
        name = HARD_RESET
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
        description = """
This command resets this assembly by cycling the power of the motion controller. It can be invoked only when this assembly is in *:*Error state. During the command execution, the power of the motion controller will be turned off, the configuration will be reloaded, the connections to HCDs are reestablished. Successful execution will result in Init:Running state.

This command can be invoked only when all the axes are stopped. If someone wants to reset this assembly during a motion, 'stop' command has to be executed explicitly beforehand.

Internally, this command will execute HARD_SHUTDOWN, UNINITIALIZE, INITIALIZE and STARTUP commands sequentially.

"""
    }
    {
        name = DATUM
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
            REQ-3-IRIS-SW-0470
        ]
        description = """
This command triggers datuming. It can be invoked only when this assembly is in either Init:Running, Lock:Locked, Lock:Paused, Park:Parked, Park:Paused or Datum:Paused state. Right after accepting this command, this assembly will go to Datum:Datuming state and stay there until datuming is completed, canceled or stopped due to an error.

If the motion controller is in low current mode, this assembly first makes it exit from the low current mode, then start homing of all 3 axes in parallel. After homing is completed, the retruction axis moves to the specified position (IN or OUT) and both prisms to rotate to 0 degree angle. Successful execution will result in In:Ready or Out:Retructed state.

This command is also used to unlock and index the machanisms after cooling or pressurizing is completed. Unlock and index mechanisms should be done in 'Activate' and 'Warm Active' use cases as defined in [IRIS - Software Design Document (TMT.INS.PDD.14.024.DRF07)](https://docushare.tmt.org/docushare/dsweb/Get/Document-32613/160210_IRIS_SDD_DRF07.docx). This command does unlock and index actions at once. To prevent from moving the axes from moving by mistake, this command will not be accepted if the dewer is not in either Activate or Warm Activate stage.

Failed execution (e.g. homing switch cannot be found, network disconnection) will result in Datum:Error state.

"""
        requiredArgs = [initialPosition]
        args = [
            {
                name = initialPosition
                description = "initial position after homing"
                enum = [IN, OUT]
            }
        ]
    }
    {
        name = FOLLOW
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
            REQ-3-IRIS-SW-0420
        ]
        description = """
This command starts following motion. It can be invoked only when the current state is In:Ready.

After accepting this command, this assembly first subscribes to required event streams from TCS, then starts continuous rotation of two prisms based on the received events. This continuous rotation will last until 'stop' command is executed or an unrecoverable error is detected. Failed execution will result in In:FollowingError or In:Error state.

If FIELD mode (field rotation tracking mode for sidereal and non-sidereal objects) is chosen, the angles of two prisms will be determined by the events from TCS. If PUPIL mode (pupil rotation tracking mode for non-sidereal objects) is chosen, the angles of two prisms will be determined by the events from the cold mask.

If _startTime_ is not given, the following motion will start immediately. If _startTime_ is given, this assembly stays in In:Ready state until the specified time, and then starts the following motion. By issuing 'stop' command, the scheduled following motion can be canceled.

This assembly will not compensate any delay (e.g. delay caused by communication over Ethernet) from _startTime_ until actual time which starts following motion, which should be negligible.

This assembly returns a response to the caller immediately after the reception of this command. If the given arguments are valid, it sends back a reponse which indicates success. Otherwise (e.g. startTime is before the current time, or too distance future), it sends back a response which indicates an error.

__TBD__: check if we need to implement pupil rotation tracking mode
__TBD__: this command may not be required because in the current design [ICD TCS-IRIS (TMT.SEN.ICD.13.002.DRF07)](https://docushare.tmt.org/docushare/dsweb/Get/Version-63705/ICD_TCS_IRIS_DRF07_20160613_tn_ec_jw.docx) the priming & following motion starts on events published by TCS.
"""
        requiredArgs = [mode]
        args = [
            {
                name = mode
                description = "tracking mode"
                enum = [FIELD, PUPIL]
            }
            {
                name = startTime
                description = """
Time to start following motion.

__ASSUMPTION__: use a common timestamp type provided by CSW
"""
                type = object
            }
        ]
    }
    {
        name = HARD_SHUTDOWN
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
            REQ-3-IRIS-SW-0680
        ]
        description = """
This command turns off the power of the motion controller forcibly to protect ADC and other devices in IRIS from the damage caused by possible runaway (e.g. braking cannot work). This command can be called only when this assembly is in an error state. It may be also called autonomously if this assembly judges that any axix is out of control.

If this command is successfully executed, this assembly will be staged in Off:PowerOff state. After that the user must issue SOFT_SHUTDOWN command to put it back to Init:Initialized state.

If this assembly cannot confirm the power-off of the motion controller within __TBD__ seconds since the reception of this command, it is considered that the motion controller is completely out of control. This assembly will be staged in Off:Error state, and an alarm is raised to notify the user of this error and suggest forcibly shutting down the power in the rack.

__TBD__: The assembly may send out power off commands to power-assembly repeatedly until it confirms the power is off.
"""
    }
    {
        name = INSERT
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
        description = """
This command inserts the ADC into the science light path. It is accepted only when this assembly is in Out:Retructed or Out:Paused state. Successful execution will result in In:Ready state.

If prism[1|2]_deg is specified, prism[1|2] will also rotate to the specified angles in parallel to moving the retraction axis.
"""
        args = [
            {
                name = prism1_deg
                description = """
Upper prism absolute angle or relative amount from the current angle (depends on prism1_mode).
The valid range is -180 deg to +180 deg. Both -180 and +180 are valid, and considered as the same.
"""
                type = double
            }
            {
                name = prism1_mode
                description = """
This argument specifies if the given angle in prism1_dig is absolute angle or relative amount from the current angle.
"""
                enum = [ABSOLUTE, RELATIVE]
            }
            {
                name = prism2_deg
                description = """
Lower prism absolute angle or relative amount from the current angle (depends on prism2_mode).
The valid range is -180 deg to +180 deg. Both -180 and +180 are valid, and considered as the same.
"""
                type = double
            }
            {
                name = prism2_mode
                description = """
This argument specifies if the given angle in prism2_deg is absolute angle or relative amount from the current angle.
"""
                enum = [ABSOLUTE, RELATIVE]
            }
        ]
    }
    {
        name = LOCK
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
        description = """
This command locks all the three axes in ADC. It is required for 'Warm Stow' and 'Stow' use cases defined in [IRIS - Software Design Document (TMT.INS.PDD.14.024.DRF07)](https://docushare.tmt.org/docushare/dsweb/Get/Document-32613/160210_IRIS_SDD_DRF07.docx) to lock mechanisms before pumping or warming the dewer.

This command is accepted when all axes are stopped (Init:Running, In:Ready, Datum:Paused, Lock:Paused, Out:Retructed, Out:Paused and Park:Parked). Successful execution will result in Lock:Locked state.

__TBD__: Actual actions to be taken is TBD. We may need to move all axes to dedicated positions and keep exciting the motors of all axes to keep the positions during warming and cooling, but we may want to completely stop supplying current to the motors or use low current mode while cooling in order to avoid unnecessary heat dissipation.
"""
    }
    {
        name = PARK
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
            REQ-3-IRIS-SW-0480
        ]
        description = """
This command first moves the retruction axis to the specifid position and set the low current mode to save the power dissipation when ADC is not in use. It is accepted only when this assembly is in In:Ready, Park:Paused, Out:Retructed or Out:Paused state. Successful execution will result in Park:Parked state where all three axes will be in low current mode.

This command is supposed to be called at the end of each night.

__TBD__: Is it necessary to set the low current mode? Or, maybe we can even stop current to the motors?
"""
        args = [
            {
                name = retructionPos
                description = """
Specify the position of the retruction axis.

* __IN__  : Inserted position.
* __OUT__ : Retructed position.
* __NEAR__: This assembly chooses the closer position (inserted or retructed) based on the current position. NAER should be normally chosen.
"""
                enum = [IN, OUT, NEAR]
            }
        ]
    }
    {
        name = RETRUCT
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
        description = """
This command retructs ADC from the science light path. It is accepted only when this assembly is in In:Ready or Out:Paused state. Successful execution will result in Out:Retructed state. Axes for prisms will not rotate at all with this command.
"""
    }
    {
        name = ROTATE
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
        description = """
This command rotates two prisms at once to the specified absolute angle. This command is accepted only when this assembly is in In:Ready state. When the motion is completed or interrupted by 'stop' command, it finally comes back to In:Ready state again.
"""
        requiredArgs = [prism1_deg, prism2_deg]
        args = [
            {
                name = prism1_deg
                description = """
Upper prism absolute angle or relative amount from the current angle (depends on prism1_mode).
The valid range is -180 deg to +180 deg.
"""
                type = double
            }
            {
                name = prism1_mode
                description = """
This argument specifies if the given angle in prism1_dig is absolute angle or relative amount.
"""
                enum = [ABSOLUTE, RELATIVE]
            }
            {
                name = prism2_deg
                description = """
Lower prism absolute angle or relative amount from the current angle (depends on prism2_mode).
The valid range is -180 deg to +180 deg.
"""
                type = double
            }
            {
                name = prism2_mode
                description = """
This argument specifies if the given angle in prism2_deg is absolute angle or relative amount.
"""
                enum = [ABSOLUTE, RELATIVE]
            }
        ]
    }
    {
        name = SOFT_SHUTDOWN
        requirements = [
            REQ-3-IRIS-SW-0230
            REQ-3-IRIS-SW-0240
        ]
        description = """
This command stages this assembly in Init:Initialized state without cycling the power of the motion controller. This command can be called when the motion is stopped or this assembly is in an error state.

Before going to Init:Initialized state, stop commands to all three axes will be issued to make sure that all axes are stopped. After that, connection to relevant HCDs will be released so that the connection can be reestablished.

__TBD__: This command will never fail and whatever happens it goes to Init:Initialized in the end.
"""
    }
]
