subsystem = IRIS
component = sci-adc-assembly

description = """
Commands which can be accepted by IRIS Science Path ADC Assembly.

Commands will be rejected immediately when the assembly is not in an appropriate state.

This command model is intended to list up possible commands reuqired to perform testing, engineering, observation configuration and observation. Main purpose of this command model is to smoke out information about what kind of instructions would be made by a person (it may be an engineer, an instrument specialist or an observer) for all use cases, not just for observation. Thus, most of the commands are very low level. In the future, a high level set-up command for observation would be defined to more or less autonomously perform observation instead of issuing low level commands one by one. The tracking information will be obtained as events from TCS in this case.

All the commands do NOT block the caller, but they are executed asynchronously. The response to each command will be sent back to the caller after some time. This time would be ranging from very short time (millisecond order or even less) to very long time (several seconds or a bit more). In principle, the response will be sent back when the specified action is completed, but the response may be sent back immediately if the command is invalid (e.g. sending TRACK command before datuming is completed) or invalid argument is given. Exception is made for TRACK command. See the description of TRACK command for more details. Note that this command behavior depends on future CSW implementation.

There is no command queues in an Assembly component as described in [TMT Software Detailed Design (CSW) (TMT.SFT.TEC.15.002.REL01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-49912/TMTSoftwareDesign-CSWPD_REL01.pdf). Only one command can be processed at a time, and commands will not be pooled in a queue for later processing. If a command (except 'stop' command) is sent to this assembly while it is processing a previous command, this assembly will immediately return an error response which indicates another action is on-going. Note that this command queue issue depens on future CSW implementation.
"""

receive = [
    {
        name = INITIALIZE
	description = """
This command loads the configuration of this assembly from Configuration Service or a local file (TBD). It is accepted only when this assembly is in Init:Loaded state. After successful completion of this command execution, this assembly will be staged in Init:Initialized state. If it fails, this assembly will stay in Init:Loaded state.

This command never rotates any axis, nor does it trigger the communication with underlying HCDs.

This command corresponds to 'initialize' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).

__TBD__: identify what configuration to be loaded
"""
    }
    {
        name = UNINITIALIZE
        description = """
This command stages this assembly in Init:Loaded state from Init:Initialized so that the initialization can be performed again after the configuration is changed. It does nothing other than that. If it fails, this assembly will stay in Init:Initialized state.

This command never rotates any axis, nor does it trigger the communication with underlying HCDs.

This command corresponds to 'uninitialize' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).
"""
    }
    {
        name = STARTUP
        description = """
This command establishes connection to galil-hcd, and turns on the motion controller if it is off. It is accepted only when this assembly is in Init:Initialized state. After successful completion of this command execution, this assembly will be staged in Init:Running state. If it fails, this assembly will stay in Init:Initialized state.

This command never rotates any axis, but it excites all the motors to hold the current positions of all axes. If any motion is on-going, it is interrupted and stopped. It may affect the thermal condition inside the dewar.

This command corresponds to 'startup' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf)
"""
    }
    {
        name = RESET
        description = """
This command resets this assembly without cycling the power of the motion controller. During the command execution, the configuration will be reloaded and the connections to HCDs are reestablished. Successful execution will result in Init:Running state.

This command can be invoked only when all the axes are stopped. If someone wants to reset this assembly during a motion, 'stop' command has to be executed explicitly beforehand.

Internally, this command will execute SHUTDOWN, UNINITIALIZE, INITIALIZE and STARTUP commands sequentially.

"""
    }
    {
        name = DATUM
        description = """
This command triggers datuming. It can be invoked only when this assembly is in either Init:Running, Lock:Locked, Lock:Paused, Park:Parked, Park:Paused or Datum:Paused state. Right after accepting this command, this assembly will go to Datum:Datuming state and stay there until datuming is completed, canceled or stopped due to an error.

This assembly first starts homing of all 3 axes in parallel. After homing is completed, the retraction axis moves to the specified position (IN or OUT) and both prisms to rotate to 0 degree angle. Successful execution will result in In:Ready or Out:Retracted state.

This command is also used to unlock and index the machanisms after cooling or pressurizing is completed. Unlock and index mechanisms should be done in 'Activate' and 'Warm Active' use cases as defined in [IRIS - Software Design Document (TMT.INS.PDD.14.024.DRF07)](https://docushare.tmt.org/docushare/dsweb/Get/Document-32613/160210_IRIS_SDD_DRF07.docx). This command does unlock and index actions at once. To prevent from moving the axes from moving by mistake, this command will not be accepted if the dewer is not in either Activate or Warm Activate stage.

Failed execution (e.g. homing switch cannot be found, network disconnection) will result in Datum:Error state.

"""
        requiredArgs = [initialPosition]
        args = [
            {
                name = initialPosition
                description = "initial position after homing"
                enum = [IN, OUT]
            }
        ]
    }
    {
        name = TRACK
        description = """
This command starts tracking motion. It can be invoked only when the current state is In:Ready.

After accepting this command, this assembly first subscribes to required event streams from TCS, then starts continuous rotation of two prisms based on the received events. This continuous rotation will last until 'stop' command is executed or an unrecoverable error is detected. Failed execution will result in In:TrackingError or In:Error state.

If FIELD mode (field rotation tracking mode for sidereal and non-sidereal objects) is chosen, the angles of two prisms will be determined by the events from TCS. If PUPIL mode (pupil rotation tracking mode for non-sidereal objects) is chosen, the angles of two prisms will be determined by TCS.cmIRIS.pupilRotation.

This assembly returns a response to the caller immediately after the reception of this command. If the given arguments are valid, it sends back a reponse which indicates success. Otherwise (e.g. startTime is before the current time, or too distant future), it sends back a response which indicates an error.

__TBD__: check if we need to implement pupil rotation tracking mode

__TBD__: this command may not be required because in the current design  the priming & tracking motion starts on events published by TCS.
"""
        args = [
            {
                name = mode
                description = "tracking mode"
                enum = [FIELD, PUPIL]
                default = FIELD
            }
            {
                name = trigger
                description = """
This argument specifies when to start tracking motion.

If IMMEDIATE is specified, the tracking motion immediately starts using tcs.cm.iris.imgCurAtmDispersion telemetry.

If TIME is specified, the tracking motion will start at the specified time in _startTime_. This assembly will not compensate any delay (e.g. delay caused by communication over Ethernet) from _startTime_ until actual time which starts tracking motion, which should be negligible. By issuing 'stop' command, the scheduled tracking motion can be canceled.

If EVENT is specified, the priming and tracking motion will be performed as described in [ICD TCS-IRIS (TMT.SEN.ICD.13.002.DRF07)](https://docushare.tmt.org/docushare/dsweb/Get/Version-63705/ICD_TCS_IRIS_DRF07_20160613_tn_ec_jw.docx).

"""
                enum = [IMMEDIATE, TIME, EVENT]
                default = EVENT
            }
            {
                name = startTime
                description = """
Time to start tracking motion.

__TODO__: use a common timestamp type provided by CSW
"""
                type = object
            }
        ]
    }
    {
        name = INSERT
        description = """
This command inserts the ADC into the science light path. It is accepted only when this assembly is in Out:Retracted or Out:Paused state. Successful execution will result in In:Ready state.

If prism[1|2]_deg is specified, prism[1|2] will also rotate to the specified angles in parallel to moving the retraction axis.
"""
        args = [
            {
                name = prism1_deg
                description = """
Upper prism absolute angle or relative amount from the current angle (depends on _prism1_mode_ ).
"""
                minimum = -180
                maximum = 180
                exclusiveMinimum = true
                exclusiveMaximum = false
                type = float
                default = 0
            }
            {
                name = prism1_mode
                description = """
This argument specifies if the given angle in _prism1_dig_ is absolute angle or relative amount from the current angle.
"""
                enum = [ABSOLUTE, RELATIVE]
                default = RELATIVE
            }
            {
                name = prism2_deg
                description = """
Lower prism absolute angle or relative amount from the current angle (depends on _prism2_mode_ ).
"""
                minimum = -180
                maximum = 180
                exclusiveMinimum = true
                exclusiveMaximum = false
                type = float
                default = 0
            }
            {
                name = prism2_mode
                description = """
This argument specifies if the given angle in _prism2_deg_ is absolute angle or relative amount from the current angle.
"""
                enum = [ABSOLUTE, RELATIVE]
                default = RELATIVE
            }
        ]
    }
    {
        name = LOCK
        description = """
This command locks all the three axes in ADC. It is required for 'Warm Stow' and 'Stow' use cases defined in [IRIS - Software Design Document (TMT.INS.PDD.14.024.DRF07)](https://docushare.tmt.org/docushare/dsweb/Get/Document-32613/160210_IRIS_SDD_DRF07.docx) to lock mechanisms before pumping or warming the dewer.

This command is accepted when all axes are stopped (Init:Running, In:Ready, Datum:Paused, Lock:Paused, Out:Retracted, Out:Paused and Park:Parked). Successful execution will result in Lock:Locked state.

__TBD__: Actual actions to be taken is TBD. This assembly would move all axes to dedicated positions and enable mechanical lock to ensure that the menachisms won't be moved.
"""
    }
    {
        name = PARK
        description = """
This command first moves the retraction axis to the specifid position. It is accepted only when this assembly is in In:Ready, Park:Paused, Out:Retracted or Out:Paused state. Successful execution will result in Park:Parked state.

This command is supposed to be called at the end of each night.

__TBD__: Actual actions to be taken is TBD.
"""
        args = [
            {
                name = retractionPos
                description = """
Specify the position of the retraction axis.

* __IN__  : Inserted position.
* __OUT__ : Retracted position.
* __NEAR__: This assembly chooses the closer position (inserted or retracted) based on the current position. NAER should be normally chosen.
"""
                enum = [IN, OUT, NEAR]
            }
        ]
    }
    {
        name = RETRACT
        description = """
This command retracts ADC from the science light path. It is accepted only when this assembly is in In:Ready or Out:Paused state. Successful execution will result in Out:Retracted state. Axes for prisms will not rotate at all with this command.
"""
    }
    {
        name = ROTATE
        description = """
This command rotates two prisms at once to the specified angles. This command is accepted only when this assembly is in In:Ready state. When the motion is completed or interrupted by 'stop' command, it finally comes back to In:Ready state again.
"""
        requiredArgs = [prism1_deg, prism2_deg]
        args = [
            {
                name = prism1_deg
                description = """
Upper prism absolute angle or relative amount from the current angle (depends on prism1_mode).
The valid range is -180 deg to +180 deg.
"""
                type = float
                default = 0
            }
            {
                name = prism1_mode
                description = """
This argument specifies if the given angle in prism1_dig is absolute angle or relative amount.
"""
                enum = [ABSOLUTE, RELATIVE]
                default = RELATIVE
            }
            {
                name = prism2_deg
                description = """
Lower prism absolute angle or relative amount from the current angle (depends on prism2_mode).
The valid range is -180 deg to +180 deg.
"""
                type = float
                default = 0
            }
            {
                name = prism2_mode
                description = """
This argument specifies if the given angle in prism2_deg is absolute angle or relative amount.
"""
                enum = [ABSOLUTE, RELATIVE]
                default = RELATIVE
            }
        ]
    }
    {
        name = SHUTDOWN
        description = """
This command stages this assembly in Init:Initialized state without cycling the power of the motion controller. This command can be called when any axis is not moving, or when this assembly is in an error state.

Before going to Init:Initialized state, stop commands to all three axes will be issued to make sure that all axes are stopped. After that, connection to relevant HCDs will be released so that the connection can be reestablished.

__TBD__: This command will never fail and whatever happens it goes to Init:Initialized in the end.
"""
    }
    {
        name = STOP
        description = """
This command stops all on-going motions. After the reception of this command, this assembly sends stop command to all axes, immediately goes to *:Braking state and waits until all the motions are stopped. When it confirms all axes are stopped, this assembly will be staged in *:Paused state or another appropriate state. If it cannot confirm all axes are stopped within expected time (considering configured deceleration), this assembly goes into *:Error state. In that case, STOP command can be reissued again.

This command also cancels the next upcoming schedule tracking motion if it is in In:Ready state.
"""
    }
]
