subsystem = IRIS
component = sci-adc-assembly

description = """
IRIS Science Path ADC Assembly Commands.

Commands will be rejected immediately when the assembly is not in an appropriate state.

__TBD__: We may need a command that does priming for a new target and start following at the designated time. This command would need to receive information about the new target and the time to start following motion as arguments. It would be achieved by sequentially executing ROTATE and FOLLOW commands.

__ASSUMPTION__: This command model more or less tried to list up commands required to perform testing, engineering work and observation. Thus, most of the commands seem to be very low level. In the future, high level commands might be defined to more or less autonomously perform observation instead of issuing low level commands one by one. Such high level commands would be achieved by a sequence of low level commands, so the current main purpose of this command model is to extract information about what kind of instructions would be made by a person (it may be an engineer, an instrument specialist or an observer).

__ASSUMPTION__: All the commands do NOT block the caller, but they are executed asynchronously. The response to each command will be sent back to the caller after some time. This time would be ranging from very short time (millisecond order or even less) to very long time (several seconds or a bit more). In principle, the response will be sent back when the specified action is completed, but the response may be sent back immediately if the command is invalid (e.g. sending FOLLOW command before datuming is completed) or invalid argument is given. Exception is made for FOLLOW command. See the description of FOLLOW command for more details. Note that this command behavior depends on future CSW implementation.

__ASSUMPTION__: There is no command queues in an Assembly component as described in [TMT Software Detailed Design (CSW) (TMT.SFT.TEC.15.002.REL01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-49912/TMTSoftwareDesign-CSWPD_REL01.pdf). Only one command can be processed at a time, and commands will not be pooled in a queue for later processing. If a command is sent to this assembly while it is processing a previous command, this assembly will immediately return an error response which indicates another action is on-going. Note that this command queue issue depens on future CSW implementation.
"""

receive = [
    {
        name = INITIALIZE
	description = """
This command loads the configuration of this assembly from Configuration Service or a local file (TBD). It is accepted only when this assembly is in Init:Loaded state. After successful completion of this command execution, this assembly will be staged in Init:Initialized state. If it fails, this assembly will stay in Init:Loaded state.

This command never rotates any axis, nor does it trigger the communication with underlying HCDs.

This command corresponds to 'initialize' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).

__TODO__: identify what configuration to be loaded
"""
    }
    {
        name = UNINITIALIZE
        description = """
This command stages this assembly in Init:Loaded state from Init:Initialized so that the initialization can be performed again after the configuration is changed. It does nothing other than that. If it fails, this assembly will stay in Init:Initialized state.

This command never rotates any axis, nor does it trigger the communication with underlying HCDs.

This command corresponds to 'uninitialize' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).
"""
    }
    {
        name = STARTUP
        description = """
This command establishes connection to galil-hcd and power-assembly (or eaton-hcd), and turns on the motion controller if it is off. It is accepted only when this assembly is in Init:Initialized state. After successful completion of this command execution, this assembly will be staged in Init:Running state. If it fails, this assembly will stay in Init:Initialized state.

This command never rotates any axis, but it excites all the motors to hold the current positions of all axes. If any motion is on-going, it is interrupted and stopped. It may affect the thermal condition inside the dewar.

This command corresponds to 'startup' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf)
"""
    }
    {
        name = SHUTDOWN
        description = """
This command cancels the on-going movement and stage this assembly in Init:Initialized after the command execution succeeds. It is accepted in whatever states except Init:* states (but including Init:Running state). It does NOT turn off the motion controller.

The failure of this command execution will stage this assembly in a certain state depending the context. For example, if this command is executed during retructing and this assembly fails to stop the retruction axis for some reason, it is staged in Out:Error state. It never turns off the motion controller.

Internally, this command will execute STOP and SOFT_SHUTDOWN commands sequentially.

This command corresponds to 'shutdown' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).
"""
    }
    {
        name = SOFT_RESET
        description = """
This command resets this assembly without cycling the power of the motion controller. During the command execution, the configuration will be reloaded and the connections to HCDs are reestablished. Successful execution will result in Init:Running state.

This command can be invoked only when all the axes are stopped. If someone wants to reset this assembly during a motion, 'stop' command has to be executed explicitly beforehand.

Internally, this command will execute SOFT_SHUTDOWN, UNINITIALIZE, INITIALIZE and STARTUP commands sequentially.

"""
    }
    {
        name = HARD_RESET
        description = """
This command resets this assembly by cycling the power of the motion controller. It can be invoked only when this assembly is in *:*Error state. During the command execution, the power of the motion controller will be turned off, the configuration will be reloaded, the connections to HCDs are reestablished. Successful execution will result in Init:Running state.

This command can be invoked only when all the axes are stopped. If someone wants to reset this assembly during a motion, 'stop' command has to be executed explicitly beforehand.

Internally, this command will execute HARD_SHUTDOWN, UNINITIALIZE, INITIALIZE and STARTUP commands sequentially.

"""
    }
    {
        name = DATUM
        description = """
This command triggers datuming. It can be invoked only when this assembly is in either Init:Running, Lock:Locked, Lock:Paused, Park:Parked, Park:Paused or Datum:Paused state. Right after accepting this command, this assembly will go to Datum:Datuming state and stay there until datuming is completed, canceled or stopped due to an error.

If the motion controller is in low current mode, this assembly first makes it exit from the low current mode, then start homing of all 3 axes in parallel. After homing is completed, the retruction axis moves to the specified position (IN or OUT) so that ADC can be used quickly for observation. Successful execution will result in In:Ready or Out:Retructed state.

Failed execution (e.g. homing switch cannot be found, network disconnection) will result in Datum:Error state.

"""
        requiredArgs = [initialPosition]
        args = [
            {
                name = initialPosition
                description = "initial position after homing"
                enum = [IN, OUT]
            }
        ]
    }
    {
        name = FOLLOW
        description = """
This command starts following action. It can be invoked only when the current state is In:Ready.

After accepting this command, this assembly first subscribes to required event streams from TCS, then starts continuous rotation of two prisms based on the received events. This continuous rotation will last until 'stop' command is executed or an unrecoverable error is detected. Failed execution will result in In:FollowingError or In:Error state.

If FIELD mode (field rotation tracking mode for sidereal and non-sidereal objects) is chosen, the position angle will be determined by the events from TCS. If PUPIL mode (pupil rotation tracking mode for non-sidereal objects) is chosen, the position angle will be determined by the events from the cold mask.

__TODO__: check if we need to implement pupil rotation tracking mode

"""
        requiredArgs = [mode]
        args = [
            {
                name = mode
                description = "tracking mode"
                enum = [FIELD, PUPIL]
            }
        ]
    }
    {
        name = HARD_SHUTDOWN
        description = """
__TODO__: fill out this description
"""
    }
    {
        name = INSERT
        description = """
__TODO__: fill out this description
"""
    }
    {
        name = LOCK
        description = """
__TODO__: fill out this description
"""
    }
    {
        name = PARK
        description = """
__TODO__: fill out this description
"""
    }
    {
        name = RETRUCT
        description = """
__TODO__: fill out this description
"""
    }
    {
        name = ROTATE
        description = """
__TODO__: fill out this description
"""
    }
    {
        name = SOFT_SHUTDOWN
        description = """
__TODO__: fill out this description
"""
    }
    {
        name = UNLOCK
        description = """
__TODO__: fill out this description
"""
    }
]
