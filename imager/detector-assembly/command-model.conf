subsystem = IRIS
component = imager-detector-assembly

description = """
Imager Detector Assembly Commands.

This command model is designed based on [Software Design Patterns for Device and Component Controllers (TMT.INS.TEC.16.079.DRF01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-57492/cc_design_patterns_DRF01_b.docx). As proposed by the design pattern, standard assembly commands and assembly-specific commands are provided for each functional group. All commands are classified into either 'request' or 'submit' based on the command type defintion described in the design pattern document.
"""

receive = [
    {
        name = INIT
        description = """
This command causes the assembly to initialize its variables, read configuration, and verify dependencies.  It prepares the assembly internally such that it is available to communicate with outside processes and begin managing the stages.  It does not cause any readout or reset on the detector. This is an internal software assembly initialization only and does not trickle down to other software components or dependencies.

This command can be invoked only when there is no exposure in progress. All commands will be rejected during the initialization. 

Initialization can fail for various reasons including HCD communications failure, hardware failure, or invalid configurations.  In this case, the command state will report an error.

Command type: request
"""
    }
    {
        name = TEST
        description = """
This command executes a self-test.  Actual action to be taken is TBD.

This command never starts an exposure nor reset the detectors.

This command can be invoked only when there is no exposure in progress. All commands will be rejected during the test.

Command type: request
"""
    }
    {
        name = START_EXPOSURE
        description = """
This command starts a new exposure with the given cofinguration.

Command type: submit
"""
        requiredArgs = [obsId, exposureNumber, rampIntegrationTime]
        args = [
            {
                name = obsId
                description = "Observation ID given by ObserveConfigArg structure as stated in [TMT Software Detailed Design (TMT.SFT.TEC.15.002.REL01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-49912/TMTSoftwareDesign-CSWPD_REL01.pdf)."
                type = string
            }
            {
                name = exposureNumber
                description = """
The exposure # within the observation. This attribute is used to determine the file name written to the disk because there can be multiple exposures in one observation. If multiple exposures are to be taken in one observation, the instrument sequencer will call START_EXPOSURE commands several times with a different exposure #.
"""
                type = integer
                minimum = 0
                maximum = 99999
            }
            {
                name = rampIntegrationTime
                description = "Integration time for one ramp. The specified value will be rounded down to the nearest valid integration time so that it will a multiple of readout time. The definition of the integration time is the time between the end of the last reset and the beginning of the last readout. Thus, only one readout will be performed if 0 is specified to this argument."
                type = float
                minimum = 0
                units = ms
            }
            {
                name = ramps
                description = "Number of ramps in one exposure."
                type = integer
                minimum = 1
                default = 1
            }
            {
                name = subregion
                description = """
Subregion definition. First index specifies detector number (0 => #1, 1 => #2, 2 => #3, 3 => #4), the second index specifies either left-bottom-most point or right-top-most point (0 => left-bottom-most, 1 => right-top-most) and the third index specifies x or y (0 => x, 1 => y). The coordinate is 0-based including reference pixel. If this argument is not specified, the whole detector array will be used.

Example: [[[det#1_x0, det#1_y0], [det#1_x1, det#1_y1]], [[det#2_x0, det#2_y0], [det#2_x1, det#2_y1]], [[det#3_x0, det#3_y0], [det#3_x1, det#3_y1]], [[det#4_x0, det#4_y0], [det#4_x1, det#4_y1]]]

The diagram below shows the definition of index of this array attribute.

<img  width="100%" height="100%" src="https://raw.githubusercontent.com/chrisaj5/IRIS-Model-Files/master/imager/detector-assembly/subregion_definition.png" alt="Subregion definition" />

__TBD__: Check if subregion (or subraster) reading is required. If so, some synchronization scheme among four detectors is required for the case different subregion size is set.
"""
                type = array
                dimensions = [4,2,2]
                items = {
                    type = integer
                    minimum = 0
                    maximum = 4095
                }
                units = pixel
            }
        ]
    }
    {
        name = ABORT_EXPOSURE
        description = """
This command aborts the current exposure.

Command type: submit
"""
    }
    {
        name = DATUM
        description = """
This command turns on the power of all four detectors if they are not on, then applies the detector configurations DETECTOR_CONF (e.g. gain, number of channels) to each detector. DSP code may be downloaded to the detector controllers if necessary.

This command can be invoked only when there is no exposure in progress.

Command type: submit
"""
    }
    {
        name = PARK
        description = """
This command cancels the exposure in progress, and turns off all four detectors.

Command type: submit
"""
    }
    {
        name = DEBUG
        description = """
This will set the current debug level. This is for debugging purposes and allows the user to increase the level of logging for debugging purposes.

Command type: request
"""
    }
]
