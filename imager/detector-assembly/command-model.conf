subsystem = IRIS
component = imager.detector

receive = [
    {
        name = DETECTOR_init
        description = """
This command causes this functional group to initialize its internal variables and read configuration. It is internally called as a part of lifecycle initialization. It does not trigger any readout or reset on the detectors.
"""
        preconditions  = ["DETECTOR_state.cmd = UNINITIALIZED ||",
                          "DETECTOR_state.cmd = READY"]
        postconditions = ["DETECTOR_state.cmd           = READY &&",
                          "DETECTOR_state.sleep         = TRUE &&",
                          "DETECTOR_exposureConf.loaded = FALSE"]
        completionType = immediate
    }
    {
        name = DETECTOR_test
        description = """
This command executes a self-test. Action to be taken is TBD.

This command never starts an exposure nor reset the detectors.
"""
        preconditions  = ["DETECTOR_state.cmd = READY"]
        completionType = immediate
    }
    {
        name = DETECTOR_loadConfiguration
        description = """
This command validates the given specified exposure configuration and saves them internally in this Assembly, the underlying Detector HCD and/or the detector controllers so that the next exposure will be performed with the specified configuration.
"""
        requiredArgs = [obsId, exposureNumber, rampIntegrationTime]
        args = [
            {
                name = obsId
                description = "Observation ID given by ObserveConfigArg structure as stated in [TMT Software Detailed Design (TMT.SFT.TEC.15.002.REL01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-58152/CSWDetailedDesign-CSWFD_REL02_signed.pdf)."
                type = string
            }
            {
                name = rampIntegrationTime
                description = "Integration time for one ramp. The specified value will be rounded down to the nearest valid integration time so that it will be a multiple of readout time. The definition of the ramp integration time is the time between resets."
                type = integer
                exclusiveMinimum = 0
                units = ms
            }
            {
                name = ramps
                description = "The number of ramps in one exposure."
                type = integer
                minimum = 1
                default = 1
            }
            {
                name = samplingMode
                description = "Sampling mode."
                enum = [MCDS, UTR]
                default = UTR
            }
            {
                name = coadd
                description = "Number of coadds for MCDS. If it is one, the sampling mode is effectively the same as CDS."
                type = integer
                default = 1
            }
        ]
        preconditions  = ["DETECTOR_state.cmd = READY"]
        postconditions = ["DETECTOR_exposureConf.loaded = TRUE"]
        completionType = longRunning
    }
    {
        name = DETECTOR_startExposure
        description = """
This command starts a new exposure with the pre-loaded configuration. This command is considered completed when the specified exposure time has been elapsed, and all the produced science outcomes (readouts and intermediate raw science frames) are successfully saved in Readout Disk.

Command type: exposure
"""
        preconditions  = ["DETECTOR_state.cmd           = READY &&",
                          "DETECTOR_state.sleep         = FALSE &&",
                          "DETECTOR_exposureConf.loaded = TRUE  &&",
                          "(DETECTOR_staticConf.detector1.use = FALSE || DETECTOR_perDetectorState.detector1.power = TRUE) &&",
                          "(DETECTOR_staticConf.detector2.use = FALSE || DETECTOR_perDetectorState.detector2.power = TRUE) &&",
                          "(DETECTOR_staticConf.detector3.use = FALSE || DETECTOR_perDetectorState.detector3.power = TRUE) &&",
                          "(DETECTOR_staticConf.detector4.use = FALSE || DETECTOR_perDetectorState.detector4.power = TRUE) &&",
                          "SHUTTER_state.move           = DATUMED &&",
                          "SHUTTER_state.onTarget       = TRUE"]
        postconditions = ["DETECTOR_state.cmd = CONTINUOUS"]
        completionType = longRunning
    }
    {
        name = DETECTOR_abortExposure
        description = """
This command cancels the current exposure in progress before the specified exposure time is elapsed.
"""
        preconditions  = ["DETECTOR_state.cmd = CONTINUOUS"]
        postconditions = ["DETECTOR_state.cmd = READY"]
        completionType = longRunning
    }
    {
        name = DETECTOR_datum
        description = """
This command turns on the power of the detectors (not the detector controller), and start the continuous reset. If it already on, this command does nothing.
"""
        preconditions  = ["DETECTOR_state.cmd   = READY &&",
                          "DETECTOR_state.sleep = FALSE"]
        postconditions = ["(DETECTOR_perDetectorState.detector1.power = TRUE if DETECTOR_staticConf.detector1.use = TRUE) &&",
                          "(DETECTOR_perDetectorState.detector2.power = TRUE if DETECTOR_staticConf.detector2.use = TRUE) &&",
                          "(DETECTOR_perDetectorState.detector3.power = TRUE if DETECTOR_staticConf.detector3.use = TRUE) &&",
                          "(DETECTOR_perDetectorState.detector4.power = TRUE if DETECTOR_staticConf.detector4.use = TRUE) &&"]
        completionType = longRunning
    }
    {
        name = DETECTOR_park
        description = """
This command turns off the power of the detector (not the detector controller).
"""
        preconditions  = ["DETECTOR_state.cmd   = READY"]
        postconditions = ["DETECTOR_perDetectorState.detector1.power = FALSE &&",
                          "DETECTOR_perDetectorState.detector2.power = FALSE &&",
                          "DETECTOR_perDetectorState.detector3.power = FALSE &&",
                          "DETECTOR_perDetectorState.detector4.power = FALSE"]
        completionType = longRunning
    }
    {
        name = DETECTOR_sleep
        description = """
This command puts this functional to sleep. Any command that turns on the power or triggers a new exposure will be rejected when sleeping.

This command is expected to be called before starting the instrument cool-down or warm-up procedure.
"""
        preconditions  = ["DETECTOR_state.cmd   = READY &&",
                          "DETECTOR_perDetectorState.detector1.power = FALSE &&",
                          "DETECTOR_perDetectorState.detector2.power = FALSE &&",
                          "DETECTOR_perDetectorState.detector3.power = FALSE &&",
                          "DETECTOR_perDetectorState.detector4.power = FALSE &&",
                          "DETECTOR_state.sleep = FALSE"]
        postconditions = ["DETECTOR_state.sleep = TRUE"]
        completionType = immediate
    }
    {
        name = DETECTOR_wakeup
        description = """
This command wakes up this functional group.

This command is expected to be called atter the completion of instrument cool-down or warm-up procedure.
"""
        preconditions  = ["DETECTOR_state.cmd   = READY &&",
                          "DETECTOR_state.sleep = TRUE"]
        postconditions = ["DETECTOR_state.sleep = FALSE"]
        completionType = immediate
    }

    {
        name = SHUTTER_init
        description = """
This command causes this functional group to initialize its internal variables and read configuration. It does not trigger any motion of the shutter.
"""
        postconditions = ["SHUTTER_state.cmd = READY"]
        completionType = immediate
    }
    {
        name = SHUTTER_datum
        description = "Perform homing of the shutter mechanism (TBC)."
        preconditions  = ["DETECTOR_state.cmd != CONTINUOUS &&",
                          "SHUTTER_state.cmd = READY &&",
                          "SHUTTER_state.sleep = FALSE &&",
                          "(SHUTTER_state.move = UNDATUMED || SHUTTER_state.move = DATUMED)"]
        postconditions = ["SHUTTER_state.move = DATUMED"]
        completionType = longRunning
    }
    {
        name = SHUTTER_stop
        description = "Stop any motion that is currently being executed."
        preconditions  = ["SHUTTER_state.cmd != UNINITIALIZED"]
        postconditions = ["SHUTTER_state.cmd = READY",
                          "(SHUTTER_state.move = UNDATUMED || SHUTTER_state.move = DATUMED)"]
        completionType = longRunning
    }
    {
        name = SHUTTER_park
        description = "Close the shutter to protect detectors from unintended excessive light when the instrument is not in use."
        preconditions  = ["DETECTOR_state.cmd != CONTINUOUS &&",
                          "(SHUTTER_state.cmd = READY || SHUTTER_state.move = DATUMED || SHUTTER_state.move = MOVING) &&",
                          "SHUTTER_state.sleep = FALSE"]
        postconditions = ["SHUTTER_state.selection = CLOSED &&",
                          "SHUTTER_state.onTarget = TRUE"]
        completionType = longRunning
    }
    {
        name = SHUTTER_sleep
        description = """This command puts this functional to sleep. Any command that moves this mechanism will be rejected when sleeping.

This command is expected to be called before starting the instrument cool-down or warm-up procedure."""
        preconditions  = ["SHUTTER_state.cmd = READY"]
        postconditions = ["SHUTTER_state.sleep = TRUE"]
        completionType = immediate
    }
    {
        name = SHUTTER_wakeup
        description = """
This command wakes up this functional group.

This command is expected to be called atter the completion of instrument cool-down or warm-up procedure.
"""
        preconditions  = ["SHUTTER_state.cmd = READY"]
        postconditions = ["SHUTTER_state.sleep = FALSE"]
        completionType = immediate
    }
    {
        name = SHUTTER_select
        description = "Open or close the shutter."
        requiredArgs = [selection]
        args = [
          {
            name = target
            description = "target position"
            enum = [OPEN, CLOSED]
          }
        ]
        preconditions  = ["DETECTOR_state.cmd != CONTINUOUS &&",
                          "(SHUTTER_state.cmd = READY || SHUTTER_state.move = DATUMED || SHUTTER_state.move = MOVING) &&",
                          "SHUTTER_state.sleep = FALSE"]
        postconditions = ["SHUTTER_state.selection = SHUTTER_move.target &&",
                          "SHUTTER_state.onTarget = TRUE &&",
                          "SHUTTER_state.move = DATUMED"]
        completionType = longRunning
    }
    {
        name = SHUTTER_test
        description = """
This command executes a self-test. Action to be taken is TBD.

This command never moves the shutter.
"""

        preconditions  = ["SHUTTER_state.cmd = READY"]
        completionType = immediate
    }

    {
      name = debug
      description = "Change logging levels for this component only. It is purely for debugging purposes."
      completionType = immediate      
    }
    {
        name = shutdown
        description = """
It is internally called as a part of the lifecycle shutdown. It does not send this command down to the underlying HCDs.
"""
        preconditions  = ["SHUTTER_state.cmd = READY"]
        postconditions = ["SHUTTER_state.cmd = UNINITIALIZED"]
        completionType = immediate
    }
]
