subsystem = IRIS
component = sci-filter-assembly

description = """
Commands which can be accepted by IRIS Filter Assembly.

Commands will be rejected immediately when the assembly is not in an appropriate state.

This command model is intended to list up possible commands reuqired to perform testing, engineering, observation configuration and observation. Main purpose of this command model is to smoke out information about what kind of instructions would be made by a person (it may be an engineer, an instrument specialist or an observer) for all use cases, not just for observation. Thus, most of the commands are very low level. In the future, a high level set-up command for observation would be defined to more or less autonomously perform observation instead of issuing low level commands one by one.

All the commands do NOT block the caller, but they are executed asynchronously. The response to each command will be sent back to the caller after some time. This time would be ranging from very short time (millisecond order or even less) to very long time (several seconds or a bit more). In principle, the response will be sent back when the specified action is completed, but the response may be sent back immediately if the command is invalid (e.g. sending SELECT command before datuming is completed) or invalid argument is given.

There is no command queues in an Assembly component as described in [TMT Software Detailed Design (CSW) (TMT.SFT.TEC.15.002.REL01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-49912/TMTSoftwareDesign-CSWPD_REL01.pdf). Only one command can be processed at a time, and commands will not be pooled in a queue for later processing. If a command (except 'stop' command) is sent to this assembly while it is processing a previous command, this assembly will immediately return an error response which indicates another action is on-going. Note that this command queue issue depens on future CSW implementation.
"""

receive = [
    {
        name = INITIALIZE
        description = """
This command loads the configuration of this assembly from Configuration Service or a local file ( __TBD__ ). It is accepted only when this assembly is in Init:Loaded state. After successful completion of this command execution, this assembly will be staged in Init:Initialized state. If it fails, this assembly will stay in Init:Loaded state.

This command never rotates any axis, nor does it trigger the communication with underlying HCDs.

This command corresponds to 'initialize' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).

__TBD__: identify what configuration to be loaded
"""
    }
    {
        name = UNINITIALIZE
        description = """
This command stages this assembly in Init:Loaded state from Init:Initialized so that the initialization can be performed again after the configuration is changed. It does nothing other than that. If it fails, this assembly will stay in Init:Initialized state.

This command never rotates any axis, nor does it trigger the communication with underlying HCDs.

This command corresponds to 'uninitialize' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).
"""
    }
    {
        name = STARTUP
        description = """
This command establishes connection to galil-hcd and power-assembly (or eaton-hcd), and turns on the motion controller if it is off. It is accepted only when this assembly is in Init:Initialized state. After successful completion of this command execution, this assembly will be staged in Init:Running state. If it fails, this assembly will stay in Init:Initialized state.

This command never rotates any axis, but it excites all the motors to hold the current positions of all axes. If any motion is on-going, it is interrupted and stopped. It may affect the thermal condition inside the dewar.

This command corresponds to 'startup' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf)
"""
    }
    {
        name = SHUTDOWN
        description = """
This command cancels the on-going movement and stage this assembly in Init:Initialized after the command execution succeeds. It is accepted in whatever states except Init:* states (but including Init:Running state). It does NOT turn off the motion controller.

The failure of this command execution will stage this assembly in a certain state depending the context. For example, if this command is executed during parking and this assembly fails to stop any axis for some reason, it is staged in Parking:Error state. It never turns off the motion controller.

Internally, this command will execute STOP and SOFT_SHUTDOWN commands sequentially.

This command corresponds to 'shutdown' message as defined in [OSW TN013 - Component Lifecycle Design and Implementation (TMT.SFT.TEC.15.006.REL04)](https://docushare.tmt.org/docushare/dsweb/Get/Document-46346/OSW%20TN013-ComponentLifecycleDesign_REL04.pdf).
"""
    }
    {
        name = SOFT_RESET
        description = """
This command resets this assembly without cycling the power of the motion controller. During the command execution, the configuration will be reloaded and the connections to HCDs are reestablished. Successful execution will result in Init:Running state.

This command can be invoked only when all the axes are stopped. If someone wants to reset this assembly during a motion, 'stop' command has to be executed explicitly beforehand.

Internally, this command will execute SOFT_SHUTDOWN, UNINITIALIZE, INITIALIZE and STARTUP commands sequentially.

"""
    }
    {
        name = HARD_RESET
        description = """
This command resets this assembly by cycling the power of the motion controller. It can be invoked only when this assembly is in *:Error state. During the command execution, the power of the motion controller will be turned off, the configuration will be reloaded, the connections to HCDs are reestablished. Successful execution will result in Init:Running state.

This command can be invoked only when all the axes are stopped. If someone wants to reset this assembly during a motion, 'stop' command has to be executed explicitly beforehand.

Internally, this command will execute HARD_SHUTDOWN, UNINITIALIZE, INITIALIZE and STARTUP commands sequentially.

"""
    }
    {
        name = DATUM
        description = """
This command triggers datuming. It can be invoked only when this assembly is in either Init:Running, Lock:Locked, Lock:Paused, Park:Parked, Park:Paused, Datum:Paused or Normal:Stopped state. Right after accepting this command, this assembly will go to Datum:Datuming state and stay there until datuming is completed, canceled or stopped due to an error.

If the motion controller is in low current mode, this assembly first makes it exit from the low current mode, then start homing of one axis and rotate it to blank filter position. After the blank filter is inserted, it starts homing of all other 4 axes in parallel so that excessive light will not enter unexpectedly. Successful execution will result in Normal:Ready.

This command is also used to unlock and index the machanisms after cooling or pressurizing is completed. Unlock and index mechanisms should be done in 'Activate' and 'Warm Active' use cases as defined in [IRIS - Software Design Document (TMT.INS.PDD.14.024.DRF07)](https://docushare.tmt.org/docushare/dsweb/Get/Document-32613/160210_IRIS_SDD_DRF07.docx). This command does unlock and index actions at once. To prevent from moving the axes from moving by mistake, this command will not be accepted if the dewer is not in either Activate or Warm Activate stage.

Failed execution (e.g. homing switch cannot be found, network disconnection) will result in Datum:Error state.
"""
    }
    {
        name = HARD_SHUTDOWN
        description = """
This command turns off the power of the motion controller forcibly to protect the filter assembly and other devices in IRIS from possible damage caused by runaway (e.g. braking cannot work). This command can be called only when this assembly is in an error state. It may be also called autonomously if this assembly judges that any axix is out of control.

If this command is successfully executed, this assembly will be staged in Off:PowerOff state. After that the user must issue SOFT_SHUTDOWN command to put it back to Init:Initialized state.

If this assembly cannot confirm the power-off of the motion controller within __TBD__ seconds since the reception of this command, it is considered that the motion controller is completely out of control. This assembly will be staged in Off:Error state, and an alarm is raised to notify the user of this error and suggest forcibly shutting down the power in the rack.

__TBD__: The assembly may send out power off commands to power-assembly repeatedly until it confirms the power is off.
"""
    }
    {
        name = LOCK
        description = """
This command locks all 5 filter wheels. It is required for 'Warm Stow' and 'Stow' use cases defined in [IRIS - Software Design Document (TMT.INS.PDD.14.024.DRF07)](https://docushare.tmt.org/docushare/dsweb/Get/Document-32613/160210_IRIS_SDD_DRF07.docx) to lock mechanisms before pumping or warming the dewer.

This command is accepted when all axes are stopped (Init:Running, In:Ready, Datum:Paused, Lock:Paused, Normal:Ready and Park:Parked). Successful execution will result in Lock:Locked state.

__TBD__: Actual actions to be taken is TBD. At least, blank filter must be in place. We may need to keep exciting the motors of all axes to keep the positions during warming and cooling, but we may want to completely stop supplying current to the motors or use low current mode while cooling in order to avoid unnecessary heat dissipation.
"""
    }
    {
        name = PARK
        description = """
This command first inserts a blank filter, and then move all 4 filters to the most common position so that the next observation can be quickly started.

This command is supposed to be called at the end of each night.

__TBD__: Is it necessary to set the low current mode? Or, maybe we can even stop current to the motors?
"""
    }
    {
        name = ROTATE
        description = """
This command rotates filter wheels to specified positions. Actual behavior of this command depends on the current status and he specified filter sets. Typically, this command first inserts blank filter in one of 5 filter wheels, then rotates other 4 filters into the specified position. Finally, the blank filter is removed and rotated to empty filter position. The filter wheels are rotated automatically in a way that excessive light will not enter unexpectedly.

If the desired position is not specified, that wheel will stay there, or it will be probably rotated to insert blank filter, but finally come back to the original position.

This command is accepted only when this assembly is in Normal:Ready state. When the motion is completed or interrupted by 'stop' command, it finally comes back to Normal:Ready state again.
"""
        args = [
            {
                name = filter1
                description = "Desired filter in wheel 1."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, EMPTY]
            }
            {
                name = filter2
                description = "Desired filter in wheel 2."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, EMPTY]
            }
            {
                name = filter3
                description = "Desired filter in wheel 3."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, EMPTY]
            }
            {
                name = filter4
                description = "Desired filter in wheel 4."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, EMPTY]
            }
            {
                name = filter5
                description = "Desired filter in wheel 5."
                enum = [TBD1, TBD2, TBD3, TBD4, TBD5, TBD6, TBD7, TBD8, TBD9, TBD10, TBD11, EMPTY]
            }
        ]
    }
    {
        name = SOFT_SHUTDOWN
        description = """
This command stages this assembly in Init:Initialized state without cycling the power of the motion controller. This command can be called when the motion is stopped or this assembly is in an error state.

Before going to Init:Initialized state, stop commands to all 5 axes will be issued to make sure that all axes are stopped. After that, connection to relevant HCDs will be released so that the connection can be reestablished.

__TBD__: This command will never fail and whatever happens it goes to Init:Initialized in the end.
"""
    }
    {
        name = STOP
        description = """
This command stops all on-going motions. After the reception of this command, this assembly sends stop command to all axes and is immediately staged in *:Braking state and waits until all the motions are stopped. When it confirms all axes are stopped, this assembly will be staged in *:Paused, Normal:Ready state or another appropriate state. If it cannot confirm any axis is stopped within an expected time (considering configured deceleration time), this assembly goes into *:Error state. In that case, STOP command can be reissued again.

This command also cancels the next upcoming schedule following motion if it is in Normal:Ready state.
"""
    }
]
