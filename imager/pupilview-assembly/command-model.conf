subsystem = IRIS
component = pupilview-assembly

description = """
Commands which can be accepted by IRIS Pupil Viewing Mode Assembly.

This command model is designed based on [Software Design Patterns for Device and Component Controllers (TMT.INS.TEC.16.079.DRF01)](https://docushare.tmt.org/docushare/dsweb/Get/Document-57492/cc_design_patterns_DRF01_b.docx). As proposed by the design pattern, standard assembly commands and assembly-specific commands are provided for each functional group. All commands are classified into either 'request' or 'submit' based on the command type defintion described in the design pattern document.
"""

receive = [
    {
        name = DETECTOR_INIT
        description = """
This command causes the assembly to initialize its variables, read configuration, and verify dependencies.  It prepares the assembly internally such that it is available to communicate with outside processes and begin managing the stages.  It does not cause any readout or reset on the detector. This is an internal software assembly initialization only and does not trickle down to other software components or dependencies.

This command can be invoked only when there is no exposure in progress. All commands will be rejected during the initialization. 

Initialization can fail for various reasons including HCD communications failure, hardware failure, or invalid configurations.  In this case, the command state will report an error.

Command type: request
"""
    }
    {
        name = MIRROR_INIT
        description = """
This command causes MIRROR functional group to initialize its variables, read configuration, and verify dependencies.  It prepares this functional group internally such that it is available to communicate with outside processes and begin managing the stages.  It does not cause any movement or initiate any action on the hardware but, it may validate connections and hardware presence before completing.  This is an internal software assembly initialization only and does not trickle down to other software components or dependencies.

This command can be invoked only when the mirror stage is not in motion. All commands will be rejected during the initialization. 

Initialization can fail for various reasons including HCD communications failure, hardware failure, or invalid configurations.  In this case, the command state will report an error.

Command type: request
"""
    }
    {
        name = DETECTOR_TEST
        description = """
This command executes a self-test.  Actual action to be taken is TBD.

This command never starts an exposure nor reset the detectors.

This command can be invoked only when there is no exposure in progress. All commands will be rejected during the test.

Command type: request
"""
    }
    {
        name = MIRROR_TEST
        description = """
This command executes a self-test.  Actual action to be taken is TBD.

This command never drives the mirror stage.

This command can be invoked only when the mirror stage is in motion. All commands will be rejected during the test.

Command type: request
"""
    }
    {
        name = DETECTOR_DATUM
        description = """
This command turns on the power of the detector if they are not on, then applies the detector configurations to the detector.

This command can be invoked only when there is no exposure in progress.

Command type: request
"""
    }
    {
        name = MIRROR_DATUM
        description = """
Perform homing of the mirror stage and reset the stepper motor counter to accurately and precisely position the stages. 

This command can be invoked only when the mirror stage is not in motion. All commands except “MIRROR_stop” will be rejected during the datum.

In the event of an error or failure to index, datum will return an error response, the command state will be set to error, and the movement state will be un-indexed.  The position will report as unknown.

Command type: submit
"""
    }
    {
        name = DETECTOR_START_EXPOSURE
        description = """
This command starts a new exposure with the given cofinguration.

__TODO__: Define arguments.

Command type: submit
"""
    }
    {
        name = DETECTOR_ABORT_EXPOSURE
        description = """
This command aborts the current exposure.

Command type: submit
"""
    }
    {
        name = MIRROR_SELECT
        description = """
This command inserts or retracts the fold mirror into/from the science light path.

This command can be invoked only when the mirror stage is not in motion. All commands except “MIRROR_stop” will be rejected during the execution of this command.

Command type: submit
"""
        requiredArgs = [position]
        args = [
            {
                name = position
                description = "Desired position of the fold mirror."
                enum = [IN, OUT]
            }
        ]
    }
    {
        name = DETECTOR_PARK
        description = """
This command cancels the exposure in progress, and turns off the detector.

Command type: submit
"""
    }
    {
        name = MIRROR_PARK
        description = """
This command basically does nothing, or move the mirror to the most commonly used position (e.g. inserted position).

Command type: submit
"""
    }
    {
        name = MIRROR_STOP
        description = """
Stop the motion of the mirror stage.

Command type: submit
"""
    }
    {
        name = DETECTOR_DEBUG
        description = """
This will set the current debug level.  This is for debugging purposes and allows the user to increase the level of logging for debugging purposes.

Command type: request
"""
    }
    {
        name = MIRROR_DEBUG
        description = """
This will set the current debug level.  This is for debugging purposes and allows the user to increase the level of logging for debugging purposes.

Command type: request
"""
    }
]
